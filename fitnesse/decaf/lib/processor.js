// Generated by CoffeeScript 1.8.0
(function() {
  var Command, Sut, deserialize, serialize, _, _ref;
  _ = require('underscore');

  _ref = require('./serializer'), serialize = _ref.serialize, deserialize = _ref.deserialize;

  Command = require('./command').Command;

  Sut = require('./sut').Sut;

  exports.Processor = (function() {
    function Processor(socket) {
      this.socket = socket;
      this.sut = new Sut();
    }

    Processor.prototype.run = function(commands) {
      var command, _i, _len, _ref1;
      this.response = [];
      _ref1 = deserialize(commands);
    //   for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    //     command = _ref1[_i];
    //     this.process(new Command(command));
    //   }
    var sequence = Promise.resolve([]);
    _ref1.forEach(function(command){
        sequence = sequence.then(function () {
            self.process(new Command(command));
            return Promise.resolve(self.response[self.response.length-1][1]).then(function(result){
                self.response[self.response.length-1][1] = result;
console.log(command, result);
            });
        });
    });
// console.log('run', commands);
var self = this;
    sequence.then(function(){
        // console.log(self.response)
              self.socket.write(serialize(self.response));
      }).catch(function(err){
console.error(err);
console.error(err.stack);
          self.error(err);
          self.socket.write(serialize(self.response));
      });
//   return this.socket.write(serialize(this.response));
    };

    Processor.prototype.process = function(command) {
      var e;
      this.command = command;
      try {
        return this.reply(this[this.command.operation()]());
      } catch (_error) {
        e = _error;
        return this.error(e);
      }
    };

    Processor.prototype["import"] = function() {
      this.sut.require(this.command);
      return 'OK';
    };

    Processor.prototype.make = function() {
      this.sut.make(this.command);
      return 'OK';
    };

    Processor.prototype.call = function() {
      return this.sut.call(this.command);
    };

    Processor.prototype.callAndAssign = function() {
      return this.sut.callAndAssign(this.command);
    };

    Processor.prototype.reply = function(message) {
      return this.response.push([this.command.id(), message]);
    };

    Processor.prototype.error = function(e) {
      return this.reply("__EXCEPTION__:message:<<" + e + ">>");
    };

    return Processor;

  })();

}).call(this);
